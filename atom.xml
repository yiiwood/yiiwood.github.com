<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yiiwood's Blog]]></title>
  <link href="http://yiiwood.github.com/atom.xml" rel="self"/>
  <link href="http://yiiwood.github.com/"/>
  <updated>2012-12-09T14:46:35+08:00</updated>
  <id>http://yiiwood.github.com/</id>
  <author>
    <name><![CDATA[Yiiwood]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compress Sensing]]></title>
    <link href="http://yiiwood.github.com/blog/2012/10/23/sparse-lowrank/"/>
    <updated>2012-10-23T18:54:00+08:00</updated>
    <id>http://yiiwood.github.com/blog/2012/10/23/sparse-lowrank</id>
    <content type="html"><![CDATA[<h2 id="section">还没写，先放这</h2>

<p>我摘抄总结的
<a href="http://yiiwood.github.com/images/Sparse Model for Data.pdf">Sparse Model for Data</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ensemble Learning]]></title>
    <link href="http://yiiwood.github.com/blog/2012/10/20/ensemble-learning/"/>
    <updated>2012-10-20T19:33:00+08:00</updated>
    <id>http://yiiwood.github.com/blog/2012/10/20/ensemble-learning</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>思想起源于Valiant提出的PAC( Probably Approximately Correct)学习模型。Valiant和Kearns提出了弱学习和强学习的概念,识别错误率小于1/2,也即准确率仅比随机猜测略高的学习算法称为弱学习算法;识别准确率很高并能在多项式时间内完成的学习算法称为强学习算法。同时,Valiant和Kearns首次提出了PAC学习模型中弱学习算法和强学习算法的等价性问题,即任意给定仅比随机猜测略好的弱学习算法,是否可以将其提升为强学习算法?如果二者等价,那么只需找到一个比随机猜测略好的弱学习算法就可以将其提升为强学习算法,而不必寻找很难获得的强学习算法。</p>

<!-- more -->

<p>1990年,Schapire最先构造出一种多项式级的算法,对该问题做了肯定的证明,这就是最初的Boosting算法。一年后,Freund提出了一种效率更高的Boosting算法。但是,这两种算法存在共同的实践上的缺陷,那就是都要求事先知道弱学习算法学习正确的下限。1995年,Freund和schapire改进了Boosting算法,提出了AdaBoost (Adaptive Boosting)算法[5],该算法效率和Freund于1991年提出的Boosting算法几乎相同,但不需要任何关于弱学习器的先验知识,因而更容易应用到实际问题当中。之后, Freund和 schapire进一步提出了改变Boosting投票权重的AdaBoost .M1,AdaBoost .M2等算法 ,</p>

<p>Bagging是Breiman提出的与Boosting相似的技术。Bagging技术的主要思想是给定一弱学习算法和一训练集。让该学习算法训练多轮，每轮的训练集由从初始的训练集中随机取出的n个训练例组成，初始训练例在某轮训练集中可以出现多次或根本不出现。训练之后可得到一个预测函数序列，最终的预测函数是对分类问题采用投票方式，对回归问题采用简单平均方法对新示例进行判别。稳定性是Bagging能否提高预测准确率的关键因素：Bagging对不稳定的学习算法能提高预测的准确度，而对稳定的学习算法效果不明显，有时甚至使预测精确度降低。学习算法的不稳定性是指如果训练集有较小的变化，学习算法产生的预测函数将发生较大变化。判定树、神经网络是不稳定的，而最近邻方法是稳定的。</p>

<p>Bagging(Bootstrap Aggregating)与Boosting的区别在于Bagging的训练集的选择是随机的，各轮训练集之间相互独立，而Boosting的训练集的选择不是独立的，各轮训练集的选择与前面各轮的学习结果有关；Bagging的各个预测函数没有权重，而Boosting是有权重的；Bagging的各个预测函数可以并行生成，而Boosting的各个预测函数只能顺序生成。对于象神经网络这样极为耗时的学习方法，Bagging可通过并行训练节省大量时间开销。
Bagging对于噪声容忍程度比较好，而Boosting似乎对噪声容忍程度不高。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blog 配置]]></title>
    <link href="http://yiiwood.github.com/blog/2012/10/01/octopress-blog/"/>
    <updated>2012-10-01T19:32:00+08:00</updated>
    <id>http://yiiwood.github.com/blog/2012/10/01/octopress-blog</id>
    <content type="html"><![CDATA[<h2 id="section">一、本地环境配置</h2>
<p>1、安装<a href="http://code.google.com/p/msysgit/downloads/list">Git</a>。</p>

<p>2、安装<a href="http://rubyforge.org/frs/download.php/75127/rubyinstaller-1.9.2-p290.exe">Ruby</a>，加入环境变量。</p>

<p>3、安装<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">Devkit</a>，首先解压，然后用如下CMD命令安装：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd DevKit
</span><span class="line">ruby dk.rb init
</span><span class="line">ruby dk.rb install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4、安装<a href="http://www.activestate.com/activepython/downloads">python</a>。</p>

<p>5、下载Octopress，执行下面的git命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git  octopress</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6、加入中文UTF-8编码支持，Windows环境变量配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LANG=zh_CN.UTF-8
</span><span class="line">LC_ALL=zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7、更新源，执行如下CMD命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem sources -a http://ruby.taobao.org/
</span><span class="line">gem sources -r http://rubygems.org/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8、安装Octopress，执行CMD命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd octopress
</span><span class="line">gem install bundler
</span><span class="line">bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="github">二、建立Github项目</h2>

<p>登录<a href="https://github.com/">Github</a>，新建一个命名为 username.github.com 的Repo。</p>

<h2 id="octopressgithub">三、发布Octopress到Github</h2>

<p>1、执行CMD命令，按照提示输入Repo地址（git@github.com:username/username.github.com）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd octopress
</span><span class="line">rake setup_github_pages</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2、发布，git命令（#号后面是注释）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake install      #安装主题
</span><span class="line">rake generate     #生成静态页面
</span><span class="line">rake preview      #本地预览
</span><span class="line">rake deploy       #发布到Github</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本地预览地址<a href="http://localhost:4000/">http://localhost:4000/</a>。</p>

<p>3、源文件发布到source分支下面，git命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git add .
</span><span class="line">git commit -m “your message”
</span><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4、更新博客后，执行<code>rake generate</code>、<code>rake deploy</code> 。</p>

<h2 id="markdown">四、一些Markdown语法</h2>

<p>1、代码块</p>

<p>（1）在每行代码前面空Tab键：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/*每行前空Tab*/
</span><span class="line">	int main()
</span><span class="line">	{
</span><span class="line">		int i;
</span><span class="line">		i = 0;
</span><span class="line">		return 0;
</span><span class="line">	}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>效果：</p>

<pre><code>int main()
{
	int i;
	i = 0;
	return 0;
}
</code></pre>

<p>（2）用codeblock和endcodeblock作为代码块的开头和结尾，效果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int main()
</span><span class="line">{
</span><span class="line">	printf("Hello World\n");
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2、引用块</p>

<p>代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; This is the first level of quoting.
</span><span class="line">&gt;
</span><span class="line">&gt; &gt; This is nested blockquote
</span><span class="line">&gt;
</span><span class="line">&gt; Back to the first level.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>效果：</p>

<blockquote>
  <p>This is the first level of quoting.</p>

  <blockquote>
    <p>This is nested blockquote</p>
  </blockquote>

  <p>Back to the first level.</p>
</blockquote>

<h2 id="latex">五、加入Latex支持</h2>

<p>1、首先安装<code>kramdown</code>包：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install kramdown</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再把下面的代码添加到<code>source/_includes/custom/head.html</code>文件中:</p>

<div><script src="https://gist.github.com/3938526.js?file=head_add.html"></script>
<noscript><pre><code>&lt;!-- mathjax config similar to math.stackexchange --&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], [&quot;\\(&quot;,&quot;\\)&quot;] ],
      processEscapes: true
    }
  });
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
    MathJax.Hub.Config({
      tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax(), i;
        for(i=0; i &lt; all.length; i += 1) {
            all[i].SourceElement().parentNode.className += ' has-jax';
        }
    });
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;
   src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;/script&gt;</code></pre></noscript></div>

<p>修改<code>_config.yml</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">markdown: kramdown  #rdiscount</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2、例子</p>

<p>插入代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$
</span><span class="line">\begin{align*}
</span><span class="line">  &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
</span><span class="line">  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
</span><span class="line">  &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}
</span><span class="line">      \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\
</span><span class="line">      \vdots &amp; \ddots &amp; \vdots \\
</span><span class="line">      \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)
</span><span class="line">    \end{array} \right)
</span><span class="line">  \left( \begin{array}{c}
</span><span class="line">      y_1 \\
</span><span class="line">      \vdots \\
</span><span class="line">      y_n
</span><span class="line">    \end{array} \right)
</span><span class="line">\end{align*}
</span><span class="line">$$</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>效果：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<p>单行代码：<code>$\exp(-\frac{x^2}{2})$</code>，效果：$\exp(-\frac{x^2}{2})$</p>

]]></content>
  </entry>
  
</feed>
